{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"LSW",
				"LSWB1"
			],
			[
				"start",
				"StartG"
			],
			[
				"Inj",
				"InjSpec"
			],
			[
				"di",
				"digitalWrite	Arduino digitalWrite"
			],
			[
				"sens",
				"sensorValue"
			],
			[
				"CA",
				"CALIBstate"
			],
			[
				"calib",
				"CALIBstate"
			],
			[
				"val",
				"valMin"
			],
			[
				"min",
				"minTPS"
			],
			[
				"max",
				"maxTPS"
			],
			[
				"inj",
				"injSpec"
			],
			[
				"new",
				"newMFR"
			],
			[
				"inje",
				"injectOnTime"
			],
			[
				"fu",
				"fuelCorrection"
			],
			[
				"fuel",
				"fuelCorrection"
			],
			[
				"raw",
				"rawK"
			],
			[
				"digital",
				"digitalRead	Arduino digitalRead"
			],
			[
				"fue",
				"fuelDuration"
			],
			[
				"in",
				"interrupts"
			],
			[
				"no",
				"noInterrupts"
			],
			[
				"time",
				"timeOnInject"
			],
			[
				"pulse",
				"pulsePIN"
			],
			[
				"tim",
				"timerPulse"
			],
			[
				"TCC",
				"TCCR1B"
			],
			[
				"ma",
				"maxpulseCounter"
			],
			[
				"fi",
				"finject"
			],
			[
				"I",
				"INTVRLDISP"
			],
			[
				"dig",
				"digitalRead	Arduino digitalRead"
			],
			[
				"injector",
				"injectorpin"
			],
			[
				"M",
				"MAP"
			],
			[
				"ff",
				"fformula"
			],
			[
				"Eng",
				"EngCap"
			],
			[
				"timein",
				"timeinject"
			],
			[
				"z",
				"ZMax"
			],
			[
				"Z",
				"ZMin"
			],
			[
				"f",
				"frequency"
			],
			[
				"send",
				"sendRPM"
			],
			[
				"cal",
				"calibratepin"
			],
			[
				"co",
				"core"
			],
			[
				"cdi",
				"cdipulsetime"
			],
			[
				"cali",
				"calibrating"
			],
			[
				"pin",
				"pinMode	Arduino pinMode"
			],
			[
				"pul",
				"pulseIn	Arduino pulseIn()"
			],
			[
				"t",
				"timerun"
			],
			[
				"e",
				"ecupulsepin"
			],
			[
				"digita",
				"digitalWrite	Arduino digitalWrite"
			],
			[
				"ppulse",
				"ppulsepin"
			],
			[
				"pri",
				"print"
			],
			[
				"b",
				"begin"
			],
			[
				"cd",
				"cdipulsepin"
			],
			[
				"calibrate",
				"calibratepin"
			],
			[
				"ca",
				"calibratepin"
			],
			[
				"p",
				"println"
			],
			[
				"tpsm",
				"tpsMax"
			],
			[
				"map",
				"mapMax"
			]
		]
	},
	"buffers":
	[
		{
			"file": "RetrofitFGK.cpp",
			"settings":
			{
				"buffer_size": 6478,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 311.0,
		"last_filter": "Package Control: ",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Remove Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			]
		],
		"width": 400.0
	},
	"console":
	{
		"height": 107.0,
		"history":
		[
			"import urllib2,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); open( os.path.join( ipp, pf), 'wb' ).write(by) if dh == h else None; print('Error validating download (got %s instead of %s), please try manual install' % (dh, h) if dh != h else 'Please restart Sublime Text to finish installation')",
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/Windows 8/OneDrive/Documents/4th Sem 1/FYP/FGK/Coding/Git"
	],
	"file_history":
	[
		"/F/MAF i2c/FGK_MAF_i2c/FGK_MAF_i2c.ino",
		"/D/ayzat/Dropbox/FGK/Coding/Done/3rdProto/Master/MasterComplex",
		"/C/Users/Windows 8/Documents/Arduino/RPMreceiveI2C/RPMreceiveI2C.ino",
		"/C/Users/Windows 8/Documents/Arduino/RPMsendI2C/RPMsendI2C.ino",
		"/C/Users/Windows 8/Documents/Arduino/ExSlave/ExSlave.ino",
		"/C/Users/Windows 8/Documents/Arduino/rpsanalog/rpsanalog.ino",
		"/C/Users/Windows 8/Documents/Arduino/FULLprototype/FULLprototype.ino",
		"/C/Users/Windows 8/Documents/Arduino/ECUmark3/ECUmark3.ino",
		"/C/Users/Windows 8/Documents/Arduino/ECUmark2/ECUmark2.ino",
		"/C/Users/Windows 8/Downloads/Mass_Flow_Rate.ino",
		"/C/Users/Windows 8/Documents/Arduino/RPMdriver/RPMdriver.ino",
		"/C/Users/Windows 8/Documents/Arduino/sparkpowercontrollerv3/sparkpowercontrollerv3.ino",
		"/C/Users/Windows 8/Documents/Arduino/timedelaypulse2/timedelaypulse2.ino",
		"/C/Users/Windows 8/Documents/Arduino/freq/freq.ino",
		"/C/Users/Windows 8/Documents/Arduino_Build/SajeInter/SajeInter.hex"
	],
	"find":
	{
		"height": 23.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"injectplug",
			"rpm"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "RetrofitFGK.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6478,
						"regions":
						{
						},
						"selection":
						[
							[
								1036,
								1036
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.6thProto":
	{
		"height": 100.0
	},
	"output.FGK":
	{
		"height": 100.0
	},
	"output.exec":
	{
		"height": 100.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.stino_log":
	{
		"height": 100.0
	},
	"pinned_build_system": "",
	"project": "gitretrofgk.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
		"max_columns": 1
	}
}
